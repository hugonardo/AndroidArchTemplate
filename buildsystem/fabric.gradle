apply plugin: 'io.fabric'

dependencies {
    implementation(deps.fabric.crashlytics) { transitive = true }
}

def getFabricApiKey = { ->
    def noKey = "0000000000000000000000000000000000000000"
    def key = project.hasProperty('fabricApiKey') ? fabricApiKey.toString() :
            System.getenv("FABRIC_API_KEY") ?: noKey
    if (key == noKey) {
        println "Fabric API key not found"
    } else {
        println "Fabric API key found"
    }
    return key
}

def getFabricApiSecret = { ->
    def noSecret = "0000000000000000000000000000000000000000000000000000000000000000"
    def secret = project.hasProperty('fabricApiSecret') ? fabricApiSecret.toString() :
            System.getenv("FABRIC_API_SECRET") ?: noSecret
    if (secret == noSecret) {
        println "Fabric API Secret not found"
    } else {
        println "Fabric API Secret found"
    }
    return secret
}

task fabricProperties() {
    description "Generate fabric.properties file with apiSecret"

    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment " +
                "to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: getFabricApiSecret())
            entry(key: "apiKey", value: getFabricApiKey())
        }
    }
}

preBuild.dependsOn('fabricProperties')
